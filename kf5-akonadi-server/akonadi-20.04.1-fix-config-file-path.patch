diff -r -U3 akonadi-20.04.1.orig/src/server/storage/dbconfigmysql.cpp akonadi-20.04.1/src/server/storage/dbconfigmysql.cpp
--- akonadi-20.04.1.orig/src/server/storage/dbconfigmysql.cpp	2020-05-08 12:49:29.000000000 +0300
+++ akonadi-20.04.1/src/server/storage/dbconfigmysql.cpp	2020-05-26 14:11:15.207990745 +0300
@@ -373,7 +373,7 @@
         }
 
         // first run, some MySQL versions need a mysql_install_db run for that
-        const QString confFile = StandardDirs::locateResourceFile("config", QStringLiteral("akonadi/mysql-global.conf"));
+        const QString confFile = StandardDirs::locateResourceFile("config", QStringLiteral("mysql-global.conf"));
         if (QDir(dataDir).entryList(QDir::NoDotAndDotDot | QDir::AllEntries).isEmpty()) {
             if (isMariaDB) {
                 initializeMariaDBDatabase(confFile, dataDir);
diff -r -U3 akonadi-20.04.1.orig/src/widgets/selftestdialog.cpp akonadi-20.04.1/src/widgets/selftestdialog.cpp
--- akonadi-20.04.1.orig/src/widgets/selftestdialog.cpp	2020-05-08 12:49:29.000000000 +0300
+++ akonadi-20.04.1/src/widgets/selftestdialog.cpp	2020-05-26 14:11:23.455889981 +0300
@@ -317,7 +317,7 @@
     }
 
     QStandardItem *item = nullptr;
-    const QString globalConfig = StandardDirs::locateResourceFile("config", QStringLiteral("akonadi/mysql-global.conf"));
+    const QString globalConfig = StandardDirs::locateResourceFile("config", QStringLiteral("mysql-global.conf"));
     const QFileInfo globalConfigInfo(globalConfig);
     if (!globalConfig.isEmpty() && globalConfigInfo.exists() && globalConfigInfo.isReadable()) {
         item = report(Success, ki18n("MySQL server default configuration found."),
@@ -330,7 +330,7 @@
                      "Check your Akonadi installation is complete and you have all required access rights."));
     }
 
-    const QString localConfig  = StandardDirs::locateResourceFile("config", QStringLiteral("akonadi/mysql-local.conf"));
+    const QString localConfig  = StandardDirs::locateResourceFile("config", QStringLiteral("mysql-local.conf"));
     const QFileInfo localConfigInfo(localConfig);
     if (localConfig.isEmpty() || !localConfigInfo.exists()) {
         report(Skip, ki18n("MySQL server custom configuration not available."),
